{"ast":null,"code":"import axios from \"axios\";\n\n// managing authentication based action types\n\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\n\n// check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"http://localhost:8000/api/auth/user\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\n\n// login user\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // Request Body\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(\"http://localhost:8000/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\n\n// Register user\nexport const register = ({\n  username,\n  password,\n  email\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // Request Body\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post(\"http://localhost:8000/api/auth/register\", body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\n\n// logout user\nexport const logout = () => (dispatch, getState) => {\n  axios.post(\"http://localhost:8000/api/auth/logout\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  });\n};\n\n// setup config with token\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n  return config;\n};","map":{"version":3,"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","login","username","password","config","headers","body","JSON","stringify","post","register","email","logout","token","auth"],"sources":["C:/Users/safiu/Downloads/FullStack_Blog_App_with_React_Redux_and_Django-master/blog/frontend/src/actions/auth.js"],"sourcesContent":["import axios from \"axios\";\n\n// managing authentication based action types\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from \"./types\";\n\n// check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"http://localhost:8000/api/auth/user\", tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    });\n};\n\n// login user\nexport const login = (username, password) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, password });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/login\", body, config)\n    .then((res) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    });\n};\n\n// Register user\nexport const register = ({ username, password, email }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, email, password });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/register\", body, config)\n    .then((res) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    });\n};\n\n// logout user\nexport const logout = () => (dispatch, getState) => {\n  axios\n    .post(\"http://localhost:8000/api/auth/logout\", null, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      });\n    });\n};\n\n// setup config with token\nexport const tokenConfig = (getState) => {\n  const token = getState().auth.token;\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}